
import type { CodingLevel } from '@/lib/types';

export const C_LEVELS: CodingLevel[] = [
  {
    title: 'Level 1: Hello, World!',
    description: 'The first step in any programming journey. Complete the code to print "Hello, World!" to the console.',
    codeTemplate: [
      '#include <stdio.h>',
      '',
      'int main() {',
      '    ',
      null,
      ';',
      '    return 0;',
      '}',
    ],
    options: [
      { id: 'c1-opt1', code: 'printf("Hello, World!");' },
      { id: 'c1-opt2', code: 'cout << "Hello, World!";' },
      { id: 'c1-opt3', code: 'print("Hello, World!");' },
    ],
    solution: ['c1-opt1'],
    blanks: 1,
  },
  {
    title: 'Level 2: Variables',
    description: 'Variables store data. Declare an integer variable named "age" and assign it the value 25.',
    codeTemplate: [
      '#include <stdio.h>',
      '',
      'int main() {',
      '    ',
      null,
      ';',
      '    printf("Age is: %d\\n", age);',
      '    return 0;',
      '}',
    ],
    options: [
      { id: 'c2-opt1', code: 'string age = "25"' },
      { id: 'c2-opt2', code: 'int age = 25' },
      { id: 'c2-opt3', code: 'let age = 25' },
    ],
    solution: ['c2-opt2'],
    blanks: 1,
  },
  {
    title: 'Level 3: Simple Loop',
    description: 'Loops repeat actions. Complete the `for` loop to count from 0 to 4.',
    codeTemplate: [
      '#include <stdio.h>',
      '',
      'int main() {',
      '    ',
      null,
      ' {',
      '        printf("%d\\n", i);',
      '    }',
      '    return 0;',
      '}',
    ],
    options: [
      { id: 'c3-opt1', code: 'for (int i = 0; i < 5; i++)' },
      { id: 'c3-opt2', code: 'loop(5)' },
      { id: 'c3-opt3', code: 'for i in range(5)' },
    ],
    solution: ['c3-opt1'],
    blanks: 1,
  },
  {
    title: 'Level 4: Conditionals',
    description: 'Use an `if-else` statement to check if a number is positive or non-positive.',
    codeTemplate: [
      '#include <stdio.h>',
      '',
      'int main() {',
      '    int num = -5;',
      '    ',
      null,
      ' {',
      '        printf("Positive\\n");',
      '    } ',
      null,
      ' {',
      '        printf("Non-Positive\\n");',
      '    }',
      '    return 0;',
      '}',
    ],
    options: [
      { id: 'c4-opt1', code: 'if (num > 0)' },
      { id: 'c4-opt2', code: 'else' },
      { id: 'c4-opt3', code: 'if num > 0:' },
      { id: 'c4-opt4', code: 'otherwise' },
    ],
    solution: ['c4-opt1', 'c4-opt2'],
    blanks: 2,
  },
  {
    title: 'Level 5: Functions',
    description: 'Functions group code into reusable blocks. Call the `greet` function.',
    codeTemplate: [
      '#include <stdio.h>',
      '',
      'void greet() {',
      '    printf("Greetings from a function!\\n");',
      '}',
      '',
      'int main() {',
      '    ',
      null,
      ';',
      '    return 0;',
      '}',
    ],
    options: [
      { id: 'c5-opt1', code: 'run greet()' },
      { id: 'c5-opt2', code: 'greet()' },
      { id: 'c5-opt3', code: 'call greet' },
    ],
    solution: ['c5-opt2'],
    blanks: 1,
  },
  {
    title: 'Level 6: Function with Parameters',
    description: 'Pass data to functions using parameters. Call `add` with two numbers.',
    codeTemplate: [
        '#include <stdio.h>',
        '',
        'void add(int a, int b) {',
        '    printf("Sum: %d\\n", a + b);',
        '}',
        '',
        'int main() {',
        '    ',
        null,
        ';',
        '    return 0;',
        '}',
    ],
    options: [
        { id: 'c6-opt1', code: 'add(5, 10)' },
        { id: 'c6-opt2', code: 'add(5 10)' },
        { id: 'c6-opt3', code: 'add 5, 10' },
    ],
    solution: ['c6-opt1'],
    blanks: 1,
  },
  {
    title: 'Level 7: Return Values',
    description: 'Functions can return a value. Complete the function to return the product of two numbers.',
    codeTemplate: [
        '#include <stdio.h>',
        '',
        'int multiply(int a, int b) {',
        '    ',
        null,
        ';',
        '}',
        '',
        'int main() {',
        '    int result = multiply(3, 4);',
        '    printf("Result: %d\\n", result);',
        '    return 0;',
        '}',
    ],
    options: [
        { id: 'c7-opt1', code: 'return a * b' },
        { id: 'c7-opt2', code: 'print(a * b)' },
        { id: 'c7-opt3', code: 'a * b' },
    ],
    solution: ['c7-opt1'],
    blanks: 1,
  },
  {
    title: 'Level 8: While Loops',
    description: 'A `while` loop continues as long as a condition is true. Print numbers from 1 to 3.',
    codeTemplate: [
        '#include <stdio.h>',
        '',
        'int main() {',
        '    int i = 1;',
        '    ',
        null,
        ' {',
        '        printf("%d\\n", i);',
        '        ',
        null,
        ';',
        '    }',
        '    return 0;',
        '}',
    ],
    options: [
        { id: 'c8-opt1', code: 'while (i <= 3)' },
        { id: 'c8-opt2', code: 'i++' },
        { id: 'c8-opt3', code: 'while (i < 3)' },
        { id: 'c8-opt4', code: 'i = i + 1' },
    ],
    solution: ['c8-opt1', 'c8-opt2'],
    blanks: 2,
  },
  {
    title: 'Level 9: Arrays',
    description: 'Arrays store multiple values. Access and print the second element of the array.',
    codeTemplate: [
        '#include <stdio.h>',
        '',
        'int main() {',
        '    int numbers[] = {10, 20, 30};',
        '    printf("Element: %d\\n", ',
        null,
        ');',
        '    return 0;',
        '}',
    ],
    options: [
        { id: 'c9-opt1', code: 'numbers[1]' },
        { id: 'c9-opt2', code: 'numbers[2]' },
        { id: 'c9-opt3', code: 'numbers.get(1)' },
    ],
    solution: ['c9-opt1'],
    blanks: 1,
  },
  {
    title: 'Level 10: Simple Pointer',
    description: 'Pointers store memory addresses. Declare a pointer to an integer `x`.',
    codeTemplate: [
        '#include <stdio.h>',
        '',
        'int main() {',
        '    int x = 10;',
        '    ',
        null,
        ' = &x;',
        '    printf("Value via pointer: %d\\n", *ptr);',
        '    return 0;',
        '}',
    ],
    options: [
        { id: 'c10-opt1', code: 'int *ptr' },
        { id: 'c10-opt2', code: 'pointer ptr' },
        { id: 'c10-opt3', code: 'int ptr' },
    ],
    solution: ['c10-opt1'],
    blanks: 1,
  },
];
