
import type { CodingLevel } from '@/lib/types';

export const C_LEVELS: CodingLevel[] = [
  {
    title: 'Level 1: Hello, World!',
    description: 'The first step in any programming journey. Complete the code to print "Hello, World!" to the console.',
    concept: {
      title: 'Printing Output',
      explanation: 'In C, the `printf()` function is used to print text to the console. It\'s a fundamental way to see the result of your code. The text you want to print goes inside the parentheses and double quotes.',
      example: 'printf("Any text you want to display");'
    },
    codeTemplate: [
      '#include <stdio.h>',
      '',
      'int main() {',
      '    ',
      null,
      ';',
      '    return 0;',
      '}',
    ],
    options: [
      { id: 'c1-opt1', code: 'printf("Hello, World!")' },
      { id: 'c1-opt2', code: 'cout << "Hello, World!";' },
      { id: 'c1-opt3', code: 'print("Hello, World!");' },
      { id: 'c1-opt4', code: 'System.out.println("Hello, World!");' },
    ],
    solution: ['c1-opt1'],
    blanks: 1,
  },
  {
    title: 'Level 2: Variables',
    description: 'Variables store data. Declare an integer variable named "age" and assign it the value 25.',
    concept: {
        title: 'Variables',
        explanation: 'Variables are containers for storing data values. In C, you must declare the type of the variable (like `int` for integers) before you use it. You can then assign a value to it using the `=` operator.',
        example: 'int myNumber = 42;\nfloat temperature = 21.5;\nchar initial = \'J\';'
    },
    codeTemplate: [
      '#include <stdio.h>',
      '',
      'int main() {',
      '    ',
      null,
      ';',
      '    printf("Age is: %d\\n", age);',
      '    return 0;',
      '}',
    ],
    options: [
      { id: 'c2-opt1', code: 'string age = "25"' },
      { id: 'c2-opt2', code: 'int age = 25' },
      { id: 'c2-opt3', code: 'let age = 25' },
      { id: 'c2-opt4', code: 'var age = 25' },
    ],
    solution: ['c2-opt2'],
    blanks: 1,
  },
  {
    title: 'Level 3: For Loops',
    description: 'Loops repeat actions. Complete the `for` loop to print the numbers 1, 2, and 3.',
    concept: {
      title: 'For Loops',
      explanation: 'A `for` loop is used to repeat a block of code a specific number of times. It has three parts: initialization (runs once at the start), condition (checked before each run), and increment (runs after each run).',
      example: 'for (int i = 0; i < 5; i++) {\n    // This code runs 5 times\n    printf("%d\\n", i);\n}'
    },
    codeTemplate: [
      '#include <stdio.h>',
      '',
      'int main() {',
      '    for (int i = 1; ',
      null,
      '; i++) {',
      '        printf("%d\\n", i);',
      '    }',
      '    return 0;',
      '}',
    ],
    options: [
      { id: 'c3-opt1', code: 'i < 3' },
      { id: 'c3-opt2', code: 'i <= 3' },
      { id: 'c3-opt3', code: 'i > 3' },
      { id: 'c3-opt4', code: 'i < 4' },
    ],
    solution: ['c3-opt2'],
    blanks: 1,
  },
  {
    title: 'Level 4: Conditional Logic',
    description: 'Check if a score is a "passing" grade. A score of 60 or higher is considered passing. Complete the `if` condition.',
    concept: {
        title: 'If-Else Conditionals',
        explanation: '`if-else` statements allow your code to make decisions. The code inside the `if` block runs if a condition is true. Pay close attention to comparison operators like `>` (greater than) and `>=` (greater than or equal to).',
        example: 'int num = 10;\nif (num > 5) {\n    printf("Number is greater than 5");\n} else {\n    printf("Number is 5 or less");\n}'
    },
    codeTemplate: [
      '#include <stdio.h>',
      '',
      'int main() {',
      '    int score = 75;',
      '    if (',
      null,
      ') {',
      '        printf("Pass\\n");',
      '    } else {',
      '        printf("Fail\\n");',
      '    }',
      '    return 0;',
      '}',
    ],
    options: [
      { id: 'c4-opt1', code: 'score > 60' },
      { id: 'c4-opt2', code: 'score >= 60' },
      { id: 'c4-opt3', code: 'score = 60' },
      { id: 'c4-opt4', code: 'score < 60' },
    ],
    solution: ['c4-opt2'],
    blanks: 1,
  },
  {
    title: 'Level 5: Functions',
    description: 'Functions group code into reusable blocks. Call the `greet` function.',
    concept: {
        title: 'Functions',
        explanation: 'Functions are named blocks of code that perform a specific task. You can "call" a function to execute its code. This helps organize your program and avoids repeating code.',
        example: '// Defining the function\nvoid sayHello() {\n    printf("Hello!");\n}\n\n// Calling the function\nsayHello();'
    },
    codeTemplate: [
      '#include <stdio.h>',
      '',
      'void greet() {',
      '    printf("Greetings from a function!\\n");',
      '}',
      '',
      'int main() {',
      '    ',
      null,
      ';',
      '    return 0;',
      '}',
    ],
    options: [
      { id: 'c5-opt1', code: 'run greet()' },
      { id: 'c5-opt2', code: 'greet()' },
      { id: 'c5-opt3', code: 'call greet' },
      { id: 'c5-opt4', code: 'greet' },
    ],
    solution: ['c5-opt2'],
    blanks: 1,
  },
  {
    title: 'Level 6: Function Parameters',
    description: 'Pass data to functions. Call the `print_square` function with the number 5.',
    concept: {
        title: 'Function Parameters',
        explanation: 'Parameters are like special variables for a function. They allow you to pass data into the function when you call it. The function can then use this data to perform its task.',
        example: '// This function takes one integer parameter\nvoid printNumber(int num) {\n    printf("The number is %d", num);\n}\n\n// Call it and pass the number 10\nprintNumber(10);'
    },
    codeTemplate: [
        '#include <stdio.h>',
        '',
        'void print_square(int num) {',
        '    printf("Square is: %d\\n", num * num);',
        '}',
        '',
        'int main() {',
        '    ',
        null,
        ';',
        '    return 0;',
        '}',
    ],
    options: [
        { id: 'c6-opt1', code: 'print_square(5)' },
        { id: 'c6-opt2', code: 'print_square[5]' },
        { id: 'c6-opt3', code: 'print_square' },
        { id: 'c6-opt4', code: 'print_square void' },
    ],
    solution: ['c6-opt1'],
    blanks: 1,
  },
  {
    title: 'Level 7: Return Values',
    description: 'Functions can return a value. Complete the function to return the larger of two numbers.',
    concept: {
        title: 'Return Values',
        explanation: 'A function can send a value back to the code that called it using the `return` keyword. This lets you use the result of a function\'s calculation in other parts of your code.',
        example: '// This function returns the sum of two numbers\nint add(int a, int b) {\n    return a + b;\n}\n\n// Store the returned value in a variable\nint sum = add(5, 3); // sum is now 8'
    },
    codeTemplate: [
        '#include <stdio.h>',
        '',
        'int find_max(int a, int b) {',
        '    if (a > b) {',
        '        ',
        null,
        ';',
        '    } else {',
        '        return b;',
        '    }',
        '}',
        '',
        'int main() {',
        '    int result = find_max(10, 20);',
        '    printf("Max is: %d\\n", result);',
        '    return 0;',
        '}',
    ],
    options: [
        { id: 'c7-opt1', code: 'return a' },
        { id: 'c7-opt2', code: 'return b' },
        { id: 'c7-opt3', code: 'printf("a")' },
        { id: 'c7-opt4', code: 'return a > b' },
    ],
    solution: ['c7-opt1'],
    blanks: 1,
  },
  {
    title: 'Level 8: While Loops',
    description: 'A `while` loop continues as long as a condition is true. Use a `while` loop to find the first power of 2 greater than 100.',
    concept: {
        title: 'While Loops',
        explanation: 'A `while` loop repeatedly executes a block of code as long as a given condition remains true. It\'s useful when you don\'t know exactly how many times you need to loop.',
        example: 'int count = 0;\nwhile (count < 3) {\n    printf("Looping...\\n");\n    count++; // It is crucial to change the condition variable inside the loop\n}'
    },
    codeTemplate: [
        '#include <stdio.h>',
        '',
        'int main() {',
        '    int value = 1;',
        '    while (',
        null,
        ') {',
        '        value = value * 2;',
        '    }',
        '    printf("Value: %d\\n", value);',
        '    return 0;',
        '}',
    ],
    options: [
        { id: 'c8-opt1', code: 'value < 100' },
        { id: 'c8-opt2', code: 'value <= 100' },
        { id: 'c8-opt3', code: 'value > 100' },
        { id: 'c8-opt4', code: 'value != 128' },
    ],
    solution: ['c8-opt2'],
    blanks: 1,
  },
  {
    title: 'Level 9: Arrays',
    description: 'Arrays store multiple values. Calculate the sum of the first and last elements in the array.',
    concept: {
        title: 'Arrays',
        explanation: 'An array is a collection of similar data types. You access elements using an index, starting from 0. To get the last element, you can use `array_size - 1`.',
        example: 'int scores[] = {88, 92, 75};\n\n// Access the first element (index 0)\nint first_score = scores[0];'
    },
    codeTemplate: [
        '#include <stdio.h>',
        '',
        'int main() {',
        '    int numbers[] = {10, 20, 30, 40, 50};',
        '    int sum = ',
        null,
        ';',
        '    printf("Sum: %d\\n", sum);',
        '    return 0;',
        '}',
    ],
    options: [
        { id: 'c9-opt1', code: 'numbers[0] + numbers[4]' },
        { id: 'c9-opt2', code: 'numbers[1] + numbers[5]' },
        { id: 'c9-opt3', code: 'numbers[0] + numbers[5]' },
        { id: 'c9-opt4', code: 'numbers[1] + numbers[4]' },
    ],
    solution: ['c9-opt1'],
    blanks: 1,
  },
  {
    title: 'Level 10: Pointers and Functions',
    description: 'Use a pointer to allow a function to modify a variable from the caller.',
    concept: {
        title: 'Pointers with Functions',
        explanation: 'By passing a pointer (a memory address) to a function, the function can directly change the value of the variable at that address. This is a powerful way for functions to have lasting effects on your program\'s data.',
        example: '// The `*p_value` refers to the variable at the memory address\nvoid add_one(int *p_value) {\n    (*p_value)++; // Add one to the original variable\n}\n\nint my_num = 5;\nadd_one(&my_num); // Pass the address of my_num\n// my_num is now 6'
    },
    codeTemplate: [
        '#include <stdio.h>',
        '',
        'void increment(int *p) {',
        '    ',
        null,
        ';',
        '}',
        '',
        'int main() {',
        '    int x = 10;',
        '    increment(&x);',
        '    printf("x is now %d\\n", x);',
        '    return 0;',
        '}',
    ],
    options: [
        { id: 'c10-opt1', code: '(*p)++' },
        { id: 'c10-opt2', code: 'p++' },
        { id: 'c10-opt3', code: '*p = 1' },
        { id: 'c10-opt4', code: 'x++' },
    ],
    solution: ['c10-opt1'],
    blanks: 1,
  },
];
